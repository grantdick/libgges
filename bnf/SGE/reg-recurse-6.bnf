## This is the BNF grammar used in the GP&EM paper for symbolic
## regression, but recursion has been explicitly performed - it is
## very similar to the grammar used by O'Neill and Ryan in their book
## (page 50), but includes an inversion operator
## 
## Note that the interpreter that we use in this codebase is a bit
## fragile - if there are no spaces around the brackets, then it
## throws a bit of a wobbly
<start>  ::= <expr>
<expr>   ::= <expr_0> ' ' <op> ' ' <expr_0>
           | '( ' <expr_0> ' ' <op> ' ' <expr_0> ' )'
		   | <pre_op> ' ( ' <expr_0> ' )'
		   | <var>
<expr_0> ::= <expr_1> ' ' <op> ' ' <expr_1>
           | '( ' <expr_1> ' ' <op> ' ' <expr_1> ' )'
		   | <pre_op> ' ( ' <expr_1> ' )'
		   | <var>
<expr_1> ::= <expr_2> ' ' <op> ' ' <expr_2>
           | '( ' <expr_2> ' ' <op> ' ' <expr_2> ' )'
		   | <pre_op> ' ( ' <expr_2> ' )'
		   | <var>
<expr_2> ::= <expr_3> ' ' <op> ' ' <expr_3>
           | '( ' <expr_3> ' ' <op> ' ' <expr_3> ' )'
		   | <pre_op> ' ( ' <expr_3> ' )'
		   | <var>
<expr_3> ::= <expr_4> ' ' <op> ' ' <expr_4>
           | '( ' <expr_4> ' ' <op> ' ' <expr_4> ' )'
		   | <pre_op> ' ( ' <expr_4> ' )'
		   | <var>
<expr_4> ::= <expr_5> ' ' <op> ' ' <expr_5>
           | '( ' <expr_5> ' ' <op> ' ' <expr_5> ' )'
		   | <pre_op> ' ( ' <expr_5> ' )'
		   | <var>
<expr_5> ::= <var> ' ' <op> ' ' <var>
           | '( ' <var> ' ' <op> ' ' <var> ' )'
           | <pre_op> ' ( ' <var> ' )'
		   | <var>
<op>     ::= '+' | '-' | '*' | 'รท' ## safe division
<pre_op> ::= 'sin' | 'cos' | 'pexp' | 'plog'| 'pinv'
<var>    ::= '1.0' | 'x1' ## remaining variables added at runtime
